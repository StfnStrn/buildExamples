/*
 * generated by Xtext 2.11.0
 */
package org.learning.example.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.learning.example.myDsl.CompilationUnit;
import org.learning.example.myDsl.MyDslPackage;
import org.learning.example.myDsl.NamedElement;
import org.learning.example.myDsl.TypeDeclaration;
import org.learning.example.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.COMPILATION_UNIT:
				sequence_CompilationUnit(context, (CompilationUnit) semanticObject); 
				return; 
			case MyDslPackage.NAMED_ELEMENT:
				if (rule == grammarAccess.getNamedElementRule()) {
					sequence_Attribute_Method(context, (NamedElement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAttributeRule()) {
					sequence_Attribute(context, (NamedElement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMethodRule()) {
					sequence_Method(context, (NamedElement) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.TYPE_DECLARATION:
				sequence_TypeDeclaration(context, (TypeDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     NamedElement returns NamedElement
	 *
	 * Constraint:
	 *     ((type=[TypeDeclaration|ID] name=ID) | (type=[TypeDeclaration|ID] name=ID))
	 */
	protected void sequence_Attribute_Method(ISerializationContext context, NamedElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns NamedElement
	 *
	 * Constraint:
	 *     (type=[TypeDeclaration|ID] name=ID)
	 */
	protected void sequence_Attribute(ISerializationContext context, NamedElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAMED_ELEMENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAMED_ELEMENT__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getTypeTypeDeclarationIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyDslPackage.Literals.NAMED_ELEMENT__TYPE, false));
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CompilationUnit returns CompilationUnit
	 *
	 * Constraint:
	 *     type+=TypeDeclaration+
	 */
	protected void sequence_CompilationUnit(ISerializationContext context, CompilationUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method returns NamedElement
	 *
	 * Constraint:
	 *     (type=[TypeDeclaration|ID] name=ID)
	 */
	protected void sequence_Method(ISerializationContext context, NamedElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAMED_ELEMENT__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAMED_ELEMENT__TYPE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMethodAccess().getTypeTypeDeclarationIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyDslPackage.Literals.NAMED_ELEMENT__TYPE, false));
		feeder.accept(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeDeclaration returns TypeDeclaration
	 *
	 * Constraint:
	 *     (kind=TypeKinds name=ID elements+=NamedElement*)
	 */
	protected void sequence_TypeDeclaration(ISerializationContext context, TypeDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
