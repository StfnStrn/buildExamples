/*
 * generated by Xtext 2.11.0
 */
package org.learning.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.learning.example.MyDsl.CompilationUnit");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeDeclarationParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//CompilationUnit:
		//	type+=TypeDeclaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//type+=TypeDeclaration*
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//TypeDeclaration
		public RuleCall getTypeTypeDeclarationParserRuleCall_0() { return cTypeTypeDeclarationParserRuleCall_0; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.learning.example.MyDsl.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindTypeKindsEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsNamedElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypeDeclaration:
		//	kind=TypeKinds name=ID
		//	'{'
		//	elements+=NamedElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//kind=TypeKinds name=ID '{' elements+=NamedElement* '}'
		public Group getGroup() { return cGroup; }
		
		//kind=TypeKinds
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//TypeKinds
		public RuleCall getKindTypeKindsEnumRuleCall_0_0() { return cKindTypeKindsEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=NamedElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//NamedElement
		public RuleCall getElementsNamedElementParserRuleCall_3_0() { return cElementsNamedElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.learning.example.MyDsl.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedElement:
		//	Attribute | Method;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Method
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.learning.example.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeDeclarationCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTypeDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Attribute NamedElement:
		//	type=[TypeDeclaration] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[TypeDeclaration] name=ID
		public Group getGroup() { return cGroup; }
		
		//type=[TypeDeclaration]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[TypeDeclaration]
		public CrossReference getTypeTypeDeclarationCrossReference_0_0() { return cTypeTypeDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeTypeDeclarationIDTerminalRuleCall_0_0_1() { return cTypeTypeDeclarationIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.learning.example.MyDsl.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeDeclarationCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTypeDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cExpressionParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Method NamedElement:
		//	type=[TypeDeclaration] name=ID '(' ')' '=' Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[TypeDeclaration] name=ID '(' ')' '=' Expression
		public Group getGroup() { return cGroup; }
		
		//type=[TypeDeclaration]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[TypeDeclaration]
		public CrossReference getTypeTypeDeclarationCrossReference_0_0() { return cTypeTypeDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeTypeDeclarationIDTerminalRuleCall_0_0_1() { return cTypeTypeDeclarationIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_5() { return cExpressionParserRuleCall_5; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.learning.example.MyDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Expression:
		//	STRING '+' STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING '+' STRING
		public Group getGroup() { return cGroup; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	
	public class TypeKindsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.learning.example.MyDsl.TypeKinds");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTERFACEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTERFACEInterfaceKeyword_0_0 = (Keyword)cINTERFACEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCLASSClassKeyword_1_0 = (Keyword)cCLASSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeKinds:
		//	INTERFACE='interface' | CLASS='class';
		public EnumRule getRule() { return rule; }
		
		//INTERFACE='interface' | CLASS='class'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTERFACE='interface'
		public EnumLiteralDeclaration getINTERFACEEnumLiteralDeclaration_0() { return cINTERFACEEnumLiteralDeclaration_0; }
		
		//'interface'
		public Keyword getINTERFACEInterfaceKeyword_0_0() { return cINTERFACEInterfaceKeyword_0_0; }
		
		//CLASS='class'
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_1() { return cCLASSEnumLiteralDeclaration_1; }
		
		//'class'
		public Keyword getCLASSClassKeyword_1_0() { return cCLASSClassKeyword_1_0; }
	}
	
	private final CompilationUnitElements pCompilationUnit;
	private final TypeDeclarationElements pTypeDeclaration;
	private final TypeKindsElements eTypeKinds;
	private final NamedElementElements pNamedElement;
	private final AttributeElements pAttribute;
	private final MethodElements pMethod;
	private final ExpressionElements pExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCompilationUnit = new CompilationUnitElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.eTypeKinds = new TypeKindsElements();
		this.pNamedElement = new NamedElementElements();
		this.pAttribute = new AttributeElements();
		this.pMethod = new MethodElements();
		this.pExpression = new ExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.learning.example.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CompilationUnit:
	//	type+=TypeDeclaration*;
	public CompilationUnitElements getCompilationUnitAccess() {
		return pCompilationUnit;
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}
	
	//TypeDeclaration:
	//	kind=TypeKinds name=ID
	//	'{'
	//	elements+=NamedElement*
	//	'}';
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//enum TypeKinds:
	//	INTERFACE='interface' | CLASS='class';
	public TypeKindsElements getTypeKindsAccess() {
		return eTypeKinds;
	}
	
	public EnumRule getTypeKindsRule() {
		return getTypeKindsAccess().getRule();
	}
	
	//NamedElement:
	//	Attribute | Method;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//Attribute NamedElement:
	//	type=[TypeDeclaration] name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Method NamedElement:
	//	type=[TypeDeclaration] name=ID '(' ')' '=' Expression;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Expression:
	//	STRING '+' STRING;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
